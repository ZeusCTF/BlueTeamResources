1st nmap scan:
---------------
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    nginx 1.18.0 (Ubuntu)
|_http-server-header: nginx/1.18.0 (Ubuntu)
|_http-title: Did not follow redirect to http://creative.thm
MAC Address: 02:99:AD:02:85:DB (Unknown)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Hostname is leaked here, adding this to /etc/hosts.
Looking at the site, nothing too useful is listed here.  We have a list of potential users, and a "components" page.  
Running a dir scan with gobuster doesn't locate anything new, just an assets directory and the aforementioned components page.

A vhost scan in gobuster does locate a 'beta' subdomain, added this to the hosts file and navigated there to find a "url tester"
I think it's due to my use of the provided attack box (however I am not certain), but I cannot get this to render valid URLs.
Regardless, I tested a variety of URLs (known sites, creative.htb, file:///, etc) and found that you can connect on 127.0.0.1, however I had to do so through burp as the page would never finish loading.
Using this information, we can starting connecting on various ports on localhost to see if there is an internal service (again, I had to use burp's intruder tool instead of a script due to the limitations) to brute force the ports.
Eventually you find 1337, which shows a directory listing of the server

You can manually appended the folder names to the end of the URL to grab the user.txt file, which is what I ended up doing.
Another file exists called "start_server.py", which appears to be a python script that uses http.server to host pages.

At "/var/www/project/flaskapp.py", we see what I assume is the beta project?  Only because there is a function called "ssrf" and part of the output has "Dead", which I encountered a few times during testing.
But enough of exploring, this burpsuite interface has lost it's uniqueness for me.
We can navigate to the /home/saad/.ssh/id_rsa file and copy the user's key, then crack this with john (as it requires a passphrase to use), then we are able to authenticate as the user.
To note, you do have to use ssh2john to create the crackable hash, then you can use john as you normally would

While I was logged in, I started poking around but was unable to locate anything that really stood out.
Then I checked the .bash_history file, which I should have checked prior, but I'm used to HTB machines that always have them cleared.
Regardless, checking this file leaks the saad users password, which I used to run 'sudo -l' and found that this account has permissions to ping as root.
Not super helpful, but they also have the LD_PRELOAD env variable.  Which I used the below article to run a provided exploit to gain root.
https://book.hacktricks.xyz/linux-hardening/privilege-escalation

Honestly, I have no idea how this worked, as it initially failed, but by running specifically 'ping' i was given a root shell... so w/e I'll take it.