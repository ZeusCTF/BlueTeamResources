When investigating a potentially compromised host, you will want to ensure that only known-good binaries are used.
This can be achieved by mounting an external drive that contains all of the necessary binaries to the suspicious machine.
Upon mounting the drive, add the mount point to the PATH variable so those binaries are used instead.

Common directories for abuse include: /tmp, /var/tmp, /dev/shm due to their unqiue properties of typically being writable by any user
Somewhat related, but this command will look for all files owned by a particular group: find / -group GROUPNAME 2>/dev/null

All files have Metadata, which is essentially embedded information that describes the file itself.
This includes information such as the create date, attributes, file type, author, etc.
Timestamps are a unique attribute as they are potentially the most useful for any type of analysis.
File create, modification, and access times often aid investigators in establishing a timeline of events.

On a Unix system, there are three main timestamps that get recorded:
1) Modify timestamp (mtime) - this reflects the last time the contents of a file were modified or altered.
"ls -l"


2) Change timestamp (ctime) - this timestamp indicates the last time a file's metadata was changed.
This includes things like permissions, ownership, filename, etc.
"ls -lc"


3) Access timestamp (atime) - this indicates the last time a file was accessed or read.
"ls -lu"

(or you can use "stat" to see all attributes at once)

On Unix systems, /etc/ is a special directory that stores configuration files and system-wide settings.
Included in this, is the /etc/passwd/ file, which contains a list of the system's accounts and their attributes.
One common persistance technique is to create a "secret" root user that the attack can later use.

Another trival persistance technique is to use groups, in particular a certain set of groups that grant elevated privileges (though theoretically any group might have some use to an attacker):
1) Sudo/wheel - for obvious reasons, members of this group have the authority to execute commands as an elevated user, making it extremely valuable for attackers
2) adm - this group typically has read access to system log files, which can expose sensitive information
3) shadow - this group is generally used for managing user authentication and password information, with the specific capability of reading the /etc/shadow file and reading password hashes
4) disk - this group allows members to have nearly unrestricted read access with some write access in the system

All system groups are contained within the /etc/groups file.
If you need to know the groups a specific user has, run the "groups <user>" command
If you instead want to view the members of a specific group, run "getent group <groupname>"

Some other useful files are the /var/log/wtmp, which is used by the "last" command, which when run displays the history of the last logged-in users
Similarly, "lastb" tracks failed login attempts, which are read from the /var/log/btmp file
"lastlog" focuses on a user's most recent login activity read from the /var/log/lastlog file

"who" is useful for determining which users are currently logged in to the system

the /etc/sudoers file determines which users posses sudo privileges, which makes it invaluable for attackers

With regards to user accounts, the .ssh/authorized_keys file will contain the public keys that are allowed to SSH into the machine, which is a fairly common persistance technique
Kind've unrelated, but as it's common in CTFs I'll include a brief overview:
1) Use ssh-keygen to generate a private/public key pair on the client machine
2) copy the public key (id_rsa.pub) into the authorized_keys file
3) you will likely have to adjust the permissions on the private key to 600
4) then you should be able to connect to the machine via the private key

