CSRF is a security vulnerability where an attacker is able to use the victim's browser to perform an unwanted action on an authorized site.
Typically accomplished through the fact that browsers include all relevant cookies when making a request to a site, which means an attacker could forge requests as the user through their browser.
This can be done in a number of ways, notably through HTML forms or malicious JavaScript intended to send queries to the targeted app.

There are three phases to a CSRF attack:
1) the attacker either knows, or must gain an understanding of how the targeted web application formats requests in order to develop a malicious payload
2) The victim must already be authenticated to the remote site, typically by cookies stored from a prior authenticated session.
3) Insufficient security measures mean that once a legitimate user clicks on the link, the site is unable to determine the difference between a malicious and legitimate web request.

CSRF attacks have a number of possibilites an attacker can abuse:
- Unauthorized access -> as an attacker can essentially control a user's actions on a particular site, which will likely have disastorous consequences
- Explointing trust -> these exploits undermine the trust users have for websites, which can be useful for limting traffic for a competitor or specific site
- Stealthy exploitation -> this means that CSRF is difficult to detect or realize you have even been victimized, which increases the success rate.

Conventional CSRF attacks frequently concentrate on state-changing actions carried out by submitting forms.
The victim is tricked into submitting a form without realizing the presence of any associated data.
The victim's web browser then sends the HTTP request to a web app where the victim is already authenticated, which typically has the vicitim transfer money or change a password, etc.

An asynchoronous CSRF exploitation occurs when operations are initiated without a complete page request-response cycle.  
This is generally seen with applications that use asynchoronous server communication (XMLHttpRequest or Fetch) and JS to produce more dynamic user interfaces.
These attacks use asynchoronous calls instead of the more conventional form submissions, however, they still exploit the same trust relationship.

Flash-based CSRF is interesting as it referrs to a CSRF attack that takes advantage of flaws within Adobe Flash Player.
Flash is no longer supported nowadays, though there are still some systems that utilize Flash components.
For note, malicious flash files typically have an extension of .swf

Hidden link/image exploitation in CSRF involves an attacker inserting an "invisible" pixel image/link into a site that is almost undetectable by the user (pretty much invisible).
Typically, the src or href element of the image is set to a destination URL intended to act on the user's behalf without their awareness.
From a server's prospective, it is imperative that they ensure each request has a unique code such that they can use this to confirm the actions/web requests are legitimate

CSRF tokens are the most common method of preventing this from occuring.
These tokens are unique, unpredictable values associated with a user's session which ensures the request came from a legitimate source.
One such implementation is known as the "Double Submit Cookies technique" where a cookie value corresponds to a value in a hidden form field.
When a server receives the request, it checks that the cookie value matches the form field value.

This works following these general steps:
1) Whenever a user logs in, the server generates a unique CSRF token.
This token is sent to the user's browser both as a cookie, and embedded in form fields where actions are taken.
2) The user then fills out a form to do some action, which includes the token.
3) Upon submitting the form, two versions of the CSRF token are sent to the server, one in the cookie and the other as the form data.
4) The server then checks if these tokens match, if so, the request is processed.


Despite the apparent effectivness, there are some vulnerabilites that have been exploited by attackers:

1) Session Cookie Hijacking (MitM) is one such vulnerability that occurs when the CSRF token is not appropriately isolated and safeguarded from the session.

2) An attacker may also be able to create a situation in which the browser's same-origin policy is broken.

3) If the site is vulnerabile to cross-site scripting, this may also give an attacker the capability of creating fradulent requests.

4) If the tokens themselves are not generated securely or are predicatable, an attacker may be able to guess their value.

5) An attacker may also be able to inject cookies into a user's browser from a related subdomain.


SameSite cookies provide a unique defense mechanisim against CSRF attacks.
These cookies come with a special attribute designed to control when they are sent along cross-site requests.
Implementing these properly is a reliable protection against CSRF attacks in addition to protecting against xss, etc.
Depending on the request's context, it can instruct the browser how to transimt cookies, with three potential values existing:

1) Lax - These provide a moderate level of protection by allowing cookies to be sent in top-level navigations and safe HTTP methods (GET, HEAD, OPTIONS).
This means the cookies will not be sent with cross-origin POST requests, which helps to prevent certain types of CSRF attacks.
However, cookies are still included in GET requests initiated by external sites, which could pose a security risk if sensitive information is stored in the cookies.

2) Strict - These offer the highest level of protection by restricting cookies to be sent only in a first-party context.
This means that cookies are only sent with requests originating from the same site that set the cookie, preventing csrf attacks.

3) None - These are sent with both first-party and cross-site requests, making them convenient for scenarios where cookies need to be accessible acroos different origins.
However, to prevent potential security risks associated with cross-site requests, None SameSite cookies require the Secure attribute if the request is made over HTTPS.
This ensures the cookies are only transmitted over secure connections.

