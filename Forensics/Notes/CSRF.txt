CSRF is a security vulnerability where an attacker is able to use the victim's browser to perform an unwanted action on an authorized site.
Typically accomplished through the fact that browsers include all relevant cookies when making a request to a site, which means an attacker could forge requests as the user through their browser.
This can be done in a number of ways, notably through HTML forms or malicious JavaScript intended to send queries to the targeted app.

There are three phases to a CSRF attack:
1) the attacker either knows, or must gain an understanding of how the targeted web application formats requests in order to develop a malicious payload
2) The victim must already be authenticated to the remote site, typically by cookies stored from a prior authenticated session.
3) Insufficient security measures mean that once a legitimate user clicks on the link, the site is unable to determine the difference between a malicious and legitimate web request.

CSRF attacks have a number of possibilites an attacker can abuse:
- Unauthorized access -> as an attacker can essentially control a user's actions on a particular site, which will likely have disastorous consequences
- Explointing trust -> these exploits undermine the trust users have for websites, which can be useful for limting traffic for a competitor or specific site
- Stealthy exploitation -> this means that CSRF is difficult to detect or realize you have even been victimized, which increases the success rate.

Conventional CSRF attacks frequently concentrate on state-changing actions carried out by submitting forms.
The victim is tricked into submitting a form without realizing the presence of any associated data.
The victim's web browser then sends the HTTP request to a web app where the victim is already authenticated, which typically has the vicitim transfer money or change a password, etc.

An asynchoronous CSRF exploitation occurs when operations are initiated without a complete page request-response cycle.  
This is generally seen with applications that use asynchoronous server communication (XMLHttpRequest or Fetch) and JS to produce more dynamic user interfaces.
These attacks use asynchoronous calls instead of the more conventional form submissions, however, they still exploit the same trust relationship.

Flash-based CSRF is interesting as it referrs to a CSRF attack that takes advantage of flaws within Adobe Flash Player.
Flash is no longer supported nowadays, though there are still some systems that utilize Flash components.
For note, malicious flash files typically have an extension of .swf

Hidden link/image exploitation in CSRF involves an attacker inserting an "invisible" pixel image/link into a site that is almost undetectable by the user (pretty much invisible).
Typically, the src or href element of the image is set to a destination URL intended to act on the user's behalf without their awareness.
From a server's prospective, it is imperative that they ensure each request has a unique code such that they can use this to confirm the actions/web requests are legitimate
