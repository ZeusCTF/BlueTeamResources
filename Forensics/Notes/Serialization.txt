Serialization is the process of transforming an object's state into a human-readable or binary format that can be stored or transmitted and reconstructed as and when required.
This is necessary in applications where data must be transferred between different parts of a system or across a network.

Deserialization is essentially the opposite, where you take the formatted data and convert it back into an object.

There have been multiple instances of insecure deserialization causing major security issues, such as Log4j or the WebLogic RCE.

Different programming languages implement serialization, howevever while the logic is essentially the same, the functionality typically differs in name.
In PHP, serialization is accomplished with the serialize() function, which converts a PHP object or array into a byte stream representing the object's data and structure.
This resulting stream can include various data types, such as arrays or objects (etc), making it unique.
An example of the result of a PHP serialize() can be as follows: O:5:"Notes":1:{s:7:"content";s:11:"Hello World";}
With the 0:5:"Notes":1: portion indicating that this data represents an object of class Notes, with one property
s:7:"content" represents the property "content" with a length of 7 chars.  (workth noting, in serialized data, strings are represented with an s, followed by the string length - integers by i)
s:11:"Hello world" is the value of the content property

Python on the other hand uses the "Pickle" module to serialize and deserialize objects.
Of note here, "pickled" data will be converted into binary format, which can result in issues with transmission across certain mediums, which therefore prompts many developers to base64 encode this binary data before transmission.

If you are in a situation without access to the site's code and suspect a serialization vulnerability, there are a few things to look for:
1) Error messages - some messages can directly indicate issues with serialization, such as PHP referencing needed functions like "unserialize()".
2) Unexpected application behavior - While not necessarily indicitive of a deserialization error alone, odd behavior in response to manipulated input can suggest issues with how data is deserialized.

Cookies are often used to store serialized data for web applications, and if the cookies appear to have data that looks base64 encoded, decoding this may reveal serialized data structures.
Some of the more common vulnerabilities involving improper serialization stem from applications trusting data set within serialized cookies (which can be modified by an attacker).

Other explotation methods do exist, such as "object injection" which arises from insecure data deserialization in web applications.
This typically occurrs when untrusted data is deserialized into an object, which allows attackers to manipulate the serialized data to execute code.
By crafting a malicious serialized object with a specially crafted __wakeup() or __destruct() method, attackers could potentiall gain RCE.

A couple of relevant tools exist to automate the testing process, with those being: Ysoserial (Java) and PHP Gadget Chain (PHP) - though many others exist
PHPGGC is interesting as it provides a library of gadget chains for various PHP frameworks designed to exploit specific vulnerabilities.

Mitigating the risks associated with insecure deserialization is vital in ensuring the security of a web application.
To detect these threats, an organization must dedicate resources towards avoiding insecure serialization formats, avoiding unnecessary eval() function usage, and the implementation of proper input validation and output encoding.
